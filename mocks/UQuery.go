// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	users "KitaSehat_Backend/internal/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UQuery is an autogenerated mock type for the UQuery type
type UQuery struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: _a0, _a1
func (_m *UQuery) ChangePassword(_a0 int, _a1 users.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, users.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *UQuery) DeleteUser(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: _a0, _a1, _a2
func (_m *UQuery) GetAllUsers(_a0 int, _a1 int, _a2 int) ([]users.User, int, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []users.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]users.User, int, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []users.User); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) int); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, int) error); ok {
		r2 = rf(_a0, _a1, _a2)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUser provides a mock function with given fields: _a0
func (_m *UQuery) GetUser(_a0 int) (users.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (users.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) users.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEmailRegistered provides a mock function with given fields: _a0
func (_m *UQuery) IsEmailRegistered(_a0 string) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsEmailRegistered")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Login provides a mock function with given fields: _a0
func (_m *UQuery) Login(_a0 string) (users.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (users.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) users.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0
func (_m *UQuery) Register(_a0 users.User) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(users.User) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: _a0, _a1
func (_m *UQuery) UpdateUser(_a0 int, _a1 users.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int, users.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUQuery creates a new instance of UQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *UQuery {
	mock := &UQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
