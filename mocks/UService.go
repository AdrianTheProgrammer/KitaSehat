// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	users "KitaSehat_Backend/internal/features/users"
)

// UService is an autogenerated mock type for the UService type
type UService struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: _a0, _a1
func (_m *UService) ChangePassword(_a0 int, _a1 users.User) (int, string) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ChangePassword")
	}

	var r0 int
	var r1 string
	if rf, ok := ret.Get(0).(func(int, users.User) (int, string)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, users.User) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, users.User) string); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: _a0
func (_m *UService) DeleteUser(_a0 int) (int, string) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 int
	var r1 string
	if rf, ok := ret.Get(0).(func(int) (int, string)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// GetAllUsers provides a mock function with given fields: _a0
func (_m *UService) GetAllUsers(_a0 int) (int, string, []users.User, int) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 int
	var r1 string
	var r2 []users.User
	var r3 int
	if rf, ok := ret.Get(0).(func(int) (int, string, []users.User, int)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(int) []users.User); ok {
		r2 = rf(_a0)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]users.User)
		}
	}

	if rf, ok := ret.Get(3).(func(int) int); ok {
		r3 = rf(_a0)
	} else {
		r3 = ret.Get(3).(int)
	}

	return r0, r1, r2, r3
}

// GetUser provides a mock function with given fields: _a0
func (_m *UService) GetUser(_a0 int) (int, string, users.User) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 int
	var r1 string
	var r2 users.User
	if rf, ok := ret.Get(0).(func(int) (int, string, users.User)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(int) users.User); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Get(2).(users.User)
	}

	return r0, r1, r2
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *UService) Login(_a0 string, _a1 string) (int, string, string) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 int
	var r1 string
	var r2 string
	if rf, ok := ret.Get(0).(func(string, string) (int, string, string)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) string); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// Register provides a mock function with given fields: _a0
func (_m *UService) Register(_a0 users.User) (int, string) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 int
	var r1 string
	if rf, ok := ret.Get(0).(func(users.User) (int, string)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(users.User) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(users.User) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: _a0, _a1, _a2
func (_m *UService) UpdateUser(_a0 echo.Context, _a1 int, _a2 users.User) (int, string) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 int
	var r1 string
	if rf, ok := ret.Get(0).(func(echo.Context, int, users.User) (int, string)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, int, users.User) int); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(echo.Context, int, users.User) string); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// NewUService creates a new instance of UService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UService {
	mock := &UService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
